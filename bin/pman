#!/usr/bin/env python3
#
# (c) 2016-2021 Fetal-Neonatal Neuroimaging & Developmental Science Center
#                      Boston Children's Hospital
#
#                 http://childrenshospital.org/FNNDSC/
#                           dev@babyMRI.org
#

import sys, os
sys.path.insert(1, os.path.join(os.path.dirname(__file__), '..'))

from    argparse            import RawTextHelpFormatter
from    argparse            import ArgumentParser
import pudb

from pfmisc._colors         import Colors
from pfmisc                 import local_ip_address

from pman.app import create_app
from pman.config import Config

str_defIP = local_ip_address()
str_version = Config.SERVER_VERSION
str_desc    = Colors.CYAN + """

 _ __  _ __ ___   __ _ _ __
| '_ \| '_ ` _ \ / _` | '_ \\
| |_) | | | | | | (_| | | | |
| .__/|_| |_| |_|\__,_|_| |_|
| |
|_|


font generated by:
http://patorjk.com/software/taag/#p=display&f=Doom&t=pman


                                Process-MANager

           A simple compute process tracking and management framework.

                              -- version """ + \
           Colors.YELLOW + str_version + Colors.CYAN + """ --

    'pman' is a server that spawns and tracks processes executed on an underlying
    shell/system. Internally, 'pman' provides services using Zero MQ and not
    http-based services.

    'pman' listens for REST comms and provides facilities for running, stopping,
    querying, and managing command-line processes.

    'pman' is also container-aware and can run containerized compute
    using either swarm or openshift (assuming suitable installed underlying
    infrastructure).

""" + \
           Colors.BLINK_RED +  """

              +---------------------------------------------------------+
              | Use '--enableTokenAuth' and '--tokenPath <tokenPath>'   |
              |         arguments for secure communication.             |
              +---------------------------------------------------------+

""" + Colors.NO_COLOUR

def synopsis(ab_shortOnly = False):
    scriptName = os.path.basename(sys.argv[0])
    shortSynopsis =  '''
    NAME

	    pman

        - process manager

    SYNOPSIS

            pman                                                    \\
                [--ip <IPofServer>]                                 \\
                [--port <port>]                                     \\
                [--enableTokenAuth]                                 \\
                [--tokenPath <tokenPath>]                           \\
                [--synopsis]                                        \\
                [--version]                                         \\
                [--desc]                                            \\
                [--verbosity <level>]

    BRIEF EXAMPLE

            pman                                                    \\
                --port 5010                                         \\
                --verbosity 1                                       \\
                --ip %s

    ''' % str_defIP

    description =  '''
    DESCRIPTION

        ``pman`` is a process manager, part of the ``pf`` suite of
        applications, and used mostly in the context of ChRIS.

        Typically ``pman`` is launched on a "remote" host where it
        listens for directives to launch and control processes.

    ARGS

        [--ip <IP>]

        The IP interface on which to listen.

        [--port <port>]
        The port on which to listen. Defaults to '5010'.

        [--enableTokenAuth]
        Enables token based authorization and can be configured to look
        for a .ini file or an openshift secret.

        [--tokenPath <tokenPath>]
        Specify the absolute path to the token in the file system.
        By default, this looks for the pfiohConfig.ini file in the current
        working directory.

        [-x|--desc]
        Provide an overview help page.

        [-y|--synopsis]
        Provide a synopsis help summary.

        [--version]
        Print internal version number and exit.

        [-v|--verbosity <level>]
        Set the verbosity level. "0" typically means no/minimal output.
        Allows for more fine tuned output control as opposed to '--quiet'
        that effectively silences everything.

    EXAMPLES

    Start ``pman``

        pman                                                        \\
                --port 5010                                         \\
                --verbosity 1                                       \\
                --ip %s

    ''' % str_defIP
    if ab_shortOnly:
        return shortSynopsis
    else:
        return shortSynopsis + description

parser  = ArgumentParser(description = str_desc, formatter_class = RawTextHelpFormatter)

parser.add_argument(
    '--ip',
    action  = 'store',
    dest    = 'ip',
    default = str_defIP,
    help    = 'Set the IP to expose.'
)
parser.add_argument(
    '--port',
    action  = 'store',
    dest    = 'port',
    default = '5010',
    help    = 'Set the port to use.'
)
parser.add_argument(
    '--version',
    help    = 'if specified, print version number',
    dest    = 'b_version',
    action  = 'store_true',
    default = False
)
parser.add_argument(
    "-v", "--verbosity",
    help    = "verbosity level for app",
    dest    = 'verbosity',
    default = "1")
parser.add_argument(
    "-x", "--desc",
    help    = "long synopsis",
    dest    = 'desc',
    action  = 'store_true',
    default = False
)
parser.add_argument(
    "-y", "--synopsis",
    help    = "short synopsis",
    dest    = 'synopsis',
    action  = 'store_true',
    default = False
)
parser.add_argument(
    '--enableTokenAuth',
    action  = 'store_true',
    help    = 'Enables token based authorization and can be configured to look for a .ini file or an openshift secret',
    dest    = 'b_tokenAuth',
    default = False
)
parser.add_argument(
    '--tokenPath',
    action  = 'store',
    help    = 'Specify the absolute path to the token in the file system.\nBy default, this looks for the pmanConfig.ini file in the current working directory',
    dest    = 'str_tokenPath',
    default = ''
)


args            = parser.parse_args()
args.port       = int(args.port)

if args.desc or args.synopsis:
    print(str_desc)
    if args.desc:
        str_help     = synopsis(False)
    if args.synopsis:
        str_help     = synopsis(True)
    print(str_help)
    sys.exit(1)

if args.b_version:
    print("Version: %s" % str_version)
    sys.exit(1)

# pudb.set_trace()
config = vars(args)
config.update({'desc': str_desc})
app = create_app(config)
app.run(host=args.ip, port=args.port)
