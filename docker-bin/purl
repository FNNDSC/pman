#!/usr/bin/env python3

import  argparse
import  os
import  sys

str_desc = """

    NAME

        purl

    SYNOPSIS

        purl            [-c <container>]                                \\
                        [--pman || --phioh]                             \\
                        --msg <JSON_payload>                            \\
                        [<flags>]

    ARGS

        [-c <container>]
        An optional container to use. If not specified, will assume 'fnndsc/pman'.

        [--pman || --pfioh]
        Dockerized destination services. If either a dockerized 'pman' or 'pfioh'
        service has been started on the local docker-LAN, then the actual IP and
        port of the dockerized service can be self-discovered using either of
        these optional flags. This saves the caller from explicitly being aware
        of the service IP:port.

        NOTE: Only useful for a service on the same docker-LAN!

        --msg <JSON_payload>
        The JSON formatted string payload to pass through to the underlying
        'purl' executable. This helper script explicitly captures this argument
        so as to completely preserve it for the container.

        [<flags>]
        The space of 'purl' compliant CLI flags and values that are passed through
        the container without any parsing.


    DESCRIPTION

        'docker-bin/purl' is a helper script/wrapper about a dockerized
        purl container. This wrapper completely "shadows" the actual 'purl'
        program, i.e. it can accept all the standard 'purl' command line args,
        and correctly preserves the --msg flag arguments.

        If started in the same docker-LAN as a previous 'pman' or 'pfioh'
        container, then only the '--msg <JSONmsg>' and one of either '--pman'
        or '--pfioh' need be specified

"""

parser  = argparse.ArgumentParser(description = str_desc)


parser.add_argument(
    '-m', '--man',
    action  = 'store_true',
    dest    = 'b_man',
    default = False,
    help    = 'show man page.'
)
parser.add_argument(
    '-c',
    action  = 'store',
    dest    = 'str_container',
    default = 'fnndsc/pman',
    help    = 'the container image to instantiate.',
)
parser.add_argument(
    '--pman',
    action  = 'store_true',
    dest    = 'b_pman',
    default = False,
    help    = 'if specified, indicates transmission to a linked <pman> container.',
)
parser.add_argument(
    '--pfioh',
    action  = 'store_true',
    dest    = 'b_pfioh',
    default = False,
    help    = 'if specified, indicates transmission to a linked <pfioh> container.',
)
parser.add_argument(
    '--msg',
    action  = 'store',
    dest    = 'msg',
    default = '',
    help    = 'JSON msg payload'
)

args, unknown   = parser.parse_known_args()

if __name__ == '__main__':

    if args.b_man:
        print(str_desc)
        sys.exit(1)

    str_link = ''
    if args.b_pfioh:
        str_link = '--link pfioh:pfioh'
    if args.b_pman:
        str_link = '--link pman:pman'

    str_otherArgs   = ' '.join(unknown)
    str_cmd         = 'docker run %s -v /home:/Users --rm -ti %s purl --msg \'%s\' %s' % (str_link, args.str_container, args.msg, str_otherArgs)
    print(str_cmd)
    os.system(str_cmd)

